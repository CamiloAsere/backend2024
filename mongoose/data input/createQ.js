import mongoose from "mongoose";
import { Question } from "../models/Panel.js";
import { DEFAULT_QUESTIONS } from "./questions.js";

async function createQuestions() {
    /*
    if (mongoose.connection.readyState !== 1) {
      console.error('La conexi√≥n a la base de datos IQ no est√° lista');
      return;
    }
    */
    
    try {
      for (const question of DEFAULT_QUESTIONS) {
        const existingQuestion = await Question.findOne({ question: question.question });
        if (existingQuestion) {
          console.log(`Ya existe una pregunta con el texto ${question.question}`);
        } else {
          const newQuestion = new Question(question);
          await newQuestion.save();
          console.log(`Se ha creado una nueva pregunta con el texto ${question.question}`);
        }
      }
    } catch (err) {
      console.error('Error creando preguntas:', err);
    }
  }
  export default createQuestions;
  /*
  S√≠, la funci√≥n `createQuestions()` es similar a `Question.insertMany()` en el sentido de que 
  ambas pueden crear m√∫ltiples documentos en la base de datos a partir de un array. Sin embargo, 
  hay una diferencia importante:

- `createQuestions()`: Esta funci√≥n recorre el array y crea una nueva pregunta para cada objeto
 del array **solo si no existe ya una pregunta con el mismo texto en la base de datos**.
  Esto significa que no se crear√°n preguntas duplicadas.

- `Question.insertMany()`: Este m√©todo de Mongoose inserta directamente todos los documentos 
del array en la base de datos, sin comprobar si ya existen documentos con los mismos datos. 
Esto podr√≠a resultar en la creaci√≥n de documentos duplicados.

Por lo tanto, aunque ambas funciones pueden crear m√∫ltiples documentos, `createQuestions()` 
tiene una comprobaci√≥n adicional para evitar duplicados. üòä

Question.insertMany(DEFAULT_QUESTIONS);
console.log('Preguntas por defecto insertadas con √©xito');
  */

  